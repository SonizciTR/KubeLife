@page "/routes"

@using KubeLife.BlazorApp.Components
@using KubeLife.Domain.Models;
@using Microsoft.AspNetCore.WebUtilities

@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

@using KubeLife.Domain;
@using KubeLife.Kubernetes.Models;
@using KubeLife.Core.Extensions;

@inject IKubernetesDomain domainService;

<h3>Routes</h3>
@if (!string.IsNullOrEmpty(ErrorMsg))
{
    <p>Error : <em>@ErrorMsg</em></p>
}
else if (routeItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th> </th>
                <th>Name</th>
                <th>Namespace</th>
                <th>Link</th>
                <th>Operations</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var itmRoute in routeItems)
            {
                <tr>
                    <td>
                        <BuildImageShow BuildData="@itmRoute.LastBuild" />
                    </td>
                    <td>@itmRoute.Name</td>
                    <td>@itmRoute.Namespace</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => NavigateToUrl(itmRoute.HostLink)"> @itmRoute.HostLink</button>
                    </td>
                    <td>
                        <div class="btn-group" role="group" aria-label="Operations">
                            <button class="btn  btn-outline-primary" @onclick="() => TriggerBuild(itmRoute.Namespace, itmRoute.Name)">
                                Build
                            </button>

                            <div class="btn-group" role="group">
                                <button id="btnGroupDrop1" type="button" class="btn btn-outline-success dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Logs
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li><a class="dropdown-item" href="#" @onclick="() => NavigateToLogView(itmRoute.Name, true)">Pods</a></li>
                                    <li><a class="dropdown-item" href="#" @onclick="() => NavigateToLogView(itmRoute.Name, false)">Last Build</a></li>
                                </ul>
                            </div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<KubeRouteViewModel> routeItems;
    private const int refreshTimeMs = 10 * 1000;
    private System.Threading.Timer? timer;
    private string ErrorMsg = null;

    protected override async Task OnInitializedAsync()
    {
        await GetRouteList();
        await CreateTimer();
    }

    private async Task CreateTimer()
    {
        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            await GetRouteList();
            await InvokeAsync(() =>
            {
                this.StateHasChanged();
            });
        }, new System.Threading.AutoResetEvent(false), refreshTimeMs, refreshTimeMs);
    }

    private async Task GetRouteList()
    {
        var rslt = await domainService.GetAllRoutesForCluster();
        routeItems = rslt.Result;
        ErrorMsg = rslt.IsSuccess ? null : rslt.Message;
    }

    public async Task NavigateToUrl(string url)
    {
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    public async Task TriggerBuild(string nameSpaceParam, string buildName)
    {
        var result = await domainService.TriggerBuild(nameSpaceParam, buildName);
        string message = result.IsSuccess ? $"Successfully Triggered : {result.Result.BuildName}" : $"Error : {result.Message}";
        if (result.IsSuccess)
        {
            var indx = routeItems.FindIndex(x => x.Name == buildName && x.Namespace == nameSpaceParam);
            if (indx > -1)
                routeItems[indx].LastBuild.StatusPhase = "Running";
        }
        await jsRuntime.InvokeVoidAsync("alert", message);
    }

    private async Task NavigateToLogView(string cronJobName, bool isPodLog)
    {
        var tmpRoute = routeItems.FirstOrDefault(x => x.Name == cronJobName);

        var queryParams = isPodLog ? await GetPodLogQueryString(tmpRoute) : await GetBuildLogQueryString(tmpRoute);
        NavManager.NavigateTo(QueryHelpers.AddQueryString("LogViewer", queryParams));
    }

    internal async Task<Dictionary<string, string>> GetBuildLogQueryString(KubeRouteViewModel routeInfo)
    {
        var queryParams = new Dictionary<string, string>
            {
                ["BuildName"] = routeInfo.Name,
                ["Namespace"] = routeInfo.Namespace,
                ["UserMsg"] = ""
            };

        return queryParams;
    }

    internal async Task<Dictionary<string, string>> GetPodLogQueryString(KubeRouteViewModel routeInfo)
    {
        var tmpAllPodsResult = await domainService.GetPodsOfRoute(routeInfo.Namespace, routeInfo.Name);
        var allPods = tmpAllPodsResult.Result;
        var queryParams = new Dictionary<string, string>
            {
                ["PodNames"] = allPods.Select(x => x.PodName).ToList().StringJoin(),
                ["Namespace"] = allPods[0].Namespace
            };

        return queryParams;
    }
}
