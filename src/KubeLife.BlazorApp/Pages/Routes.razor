@page "/routes"

@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

@using KubeLife.Domain;
@using KubeLife.Kubernetes.Models;

@inject IKubernetesDomain domainService;

<h3>Routes</h3>
@if (routeItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Namespace</th>
                <th>Link</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var itmRoute in routeItems)
            {
                <tr>
                    <td>@itmRoute.Name</td>
                    <td>@itmRoute.Namespace</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => NavigateToUrl(itmRoute.HostLink)"> @itmRoute.HostLink</button>
                    </td>
                    <td>
                        <button class="btn btn-dark" @onclick="() => TriggerBuild(itmRoute.Namespace, itmRoute.Name)">
                            Build
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<KubeRouteModel> routeItems;
    protected override async Task OnInitializedAsync()
    {
        await CallCronJobs();
    }

    private async Task CallCronJobs()
    {
        var rslt = await domainService.GetAllRoutesForCluster();
        routeItems = rslt.Result;
    }

    public async Task NavigateToUrl(string url)
    {
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    public async Task TriggerBuild(string nameSpaceParam, string buildName)
    {
        var result = await domainService.TriggerBuild(nameSpaceParam, buildName);
        string message = result.IsSuccess ? $"Successfully Triggered : {result.Result.BuildName}" : $"Error : {result.Message}";
        await jsRuntime.InvokeVoidAsync("alert", message);
    }
}
