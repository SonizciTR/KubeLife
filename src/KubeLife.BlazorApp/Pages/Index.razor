@page "/"

@inject NavigationManager Navigation
@using KubeLife.Domain.Models;
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

@using KubeLife.Domain;
@using KubeLife.Core.Extensions;
@using KubeLife.Kubernetes.Models;

@inject IKubernetesDomain domainService;

@if (crnJobItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Namespace</th>
                <th>Timing</th>
                <th>Last Run</th>
                <th>Next Run</th>
                <th>Avg (min)</th>
                <th>Success</th>
                <th>Fail</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var crnJob in crnJobItems)
            {
                <tr>
                    <td>@crnJob.CronJobName</td>
                    <td>@crnJob.Namespace</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => NavigateToCronTimeView(crnJob.TimingRaw)"> @crnJob.TimingRaw</button>
                    </td>
                    <td>@crnJob.LastStartTimeLatest.ToDateFormat()</td>
                    <td>@crnJob.NextRunTime.ToDateFormat()</td>
                    <td>@crnJob.AvgRunTimeMinutes</td>
                    <td>@crnJob.SuccessCount</td>
                    <td>@crnJob.FailureCount</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => NavigateToLogView(crnJob.CronJobName)">
                            Log
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-dark" @onclick="() => TriggerBuild(crnJob.Namespace, crnJob.CronJobName)">
                            Build
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<KubeCronJobModelView> crnJobItems;
    private DateTime LastUpdateTime = DateTime.Now;
    private System.Threading.Timer? timer;
    private const int refreshTimeMs = 10 * 1000;

    protected override async Task OnInitializedAsync()
    {
        await CallCronJobs();

        await CreateTimer();
    }

    private async Task CallCronJobs()
    {
        crnJobItems = await domainService.GetCronJobs();
        LastUpdateTime = DateTime.Now;
    }

    private async Task CreateTimer()
    {
        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            await CallCronJobs();
            await InvokeAsync(() =>
            {
                this.StateHasChanged();
            });
        }, new System.Threading.AutoResetEvent(false), refreshTimeMs, refreshTimeMs);
    }

    private async Task NavigateToLogView(string cronJobName)
    {
        var tmp = crnJobItems.FirstOrDefault(x => x.CronJobName == cronJobName);
        var latestJob = tmp.JobDetails.OrderByDescending(x => x.StartTime).FirstOrDefault();
        var podOfJob = await domainService.GetPodofJob(latestJob.KubeNamespace, latestJob.JobUniqueName);
        var queryParams = new Dictionary<string, string>
            {
                ["PodNames"] = podOfJob.IsSuccess ? podOfJob.Result.PodName : "",
                ["Namespace"] = latestJob.KubeNamespace,
                ["UserMsg"] = podOfJob.Message
            };

        NavManager.NavigateTo(QueryHelpers.AddQueryString("LogViewer", queryParams));
    }

    public async Task NavigateToCronTimeView(string cronTiming)
    {
        string url = $"https://crontab.guru/#{cronTiming.Replace(" ", "_")}";
        await jsRuntime.InvokeVoidAsync("open", url, "_blank");
    }

    public async Task TriggerBuild(string nameSpaceParam, string buildName)
    {
        var result = await domainService.TriggerBuild(nameSpaceParam, buildName);
        string message = result.IsSuccess ? $"Successfully Triggered : {result.Result.BuildName}" : $"Error : {result.Message}";
        await jsRuntime.InvokeVoidAsync("alert", message);
    }
}
