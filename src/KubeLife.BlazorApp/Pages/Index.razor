@page "/"
@using KubeLife.Kubernetes;
@using KubeLife.Core.Extensions;
@using KubeLife.Kubernetes.Extensions;
@using KubeLife.Kubernetes.Models;

@inject IKubeService kubeSerice;

<h3>CronJobs (@LastUpdateTime)</h3>

@if (crnJobItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Namespace</th>
                <th>Timing</th>
                <th>Last Run</th>
                <th>Avg Runtime (min)</th>
                <th>Success Count</th>
                <th>Fail Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in crnJobItems)
            {
                <tr>
                    <td>@forecast.CronJobName</td>
                    <td>@forecast.Namespace</td>
                    <td>@forecast.TimingRaw</td>
                    <td>@forecast.LastStartTime.ToDateFormat()</td>
                    <td>@forecast.AvgRunTimeMinutes</td>
                    <td>@forecast.SuccessCount</td>
                    <td>@forecast.FailureCount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<KubeCronJobModel> crnJobItems;
    private DateTime LastUpdateTime = DateTime.Now;
    private System.Threading.Timer? timer;
    private const int refreshTimeMs = 10 * 1000;

    protected override async Task OnInitializedAsync()
    {
        await CallCronJobs();

        await CreateTimer();
    }

    private async Task CallCronJobs()
    {
        crnJobItems = await kubeSerice.GetCronJobs("AdvancedAnalytic");
        LastUpdateTime = DateTime.Now;
    }

    private async Task CreateTimer()
    {
        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            await CallCronJobs();
            InvokeAsync(() =>
            {
                this.StateHasChanged();
            });
        }, new System.Threading.AutoResetEvent(false), refreshTimeMs, refreshTimeMs);
    }
}
